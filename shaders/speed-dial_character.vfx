//=========================================================================================================================
// Optional
//=========================================================================================================================
HEADER
{
	CompileTargets = ( IS_SM_50 && ( PC || VULKAN ) );
	Description = "Template Shader for S&box";
}

//=========================================================================================================================
// Optional
//=========================================================================================================================
FEATURES
{
    #include "common/features.hlsl"

    Feature( F_FRESNEL, 0..1, "Fresnel" );
    Feature( F_IRIDESCENCE, 0..1, "Iridescence" );
    Feature( F_DEBUG_IRIDESCENCE, 0..1, "Debug" );

    FeatureRule( Requires1( F_DEBUG_IRIDESCENCE, F_IRIDESCENCE ), "Cannot Debug Iridescence Without Iridescence" );

}

//=========================================================================================================================
// Optional
//=========================================================================================================================
MODES
{
    VrForward();													// Indicates this shader will be used for main rendering
    Depth( "vr_depth_only.vfx" ); 									// Shader that will be used for shadowing and depth prepass
    ToolsVis( S_MODE_TOOLS_VIS ); 									// Ability to see in the editor
    ToolsWireframe( "vr_tools_wireframe.vfx" ); 					// Allows for mat_wireframe to work
	ToolsShadingComplexity( "vr_tools_shading_complexity.vfx" ); 	// Shows how expensive drawing is in debug view
}

//=========================================================================================================================
COMMON
{
	#include "common/shared.hlsl"
}

//=========================================================================================================================

struct VertexInput
{
	#include "common/vertexinput.hlsl"
};

//=========================================================================================================================

struct PixelInput
{
	#include "common/pixelinput.hlsl"
};

//=========================================================================================================================

VS
{
	#include "common/vertex.hlsl"
	//
	// Main
	//
	PixelInput MainVs( INSTANCED_SHADER_PARAMS( VS_INPUT i ) )
	{
		PixelInput o = ProcessVertex( i );
		// Add your vertex manipulation functions here
		return FinalizeVertex( o );
	}
}

//=========================================================================================================================

PS
{
    #include "common/pixel.hlsl"

    StaticCombo( S_FRESNEL, F_FRESNEL, Sys( PC ) );
    StaticCombo( S_IRIDESCENCE, F_IRIDESCENCE, Sys( PC ) );
    StaticCombo( S_DEBUG_IRIDESCENCE, F_DEBUG_IRIDESCENCE, Sys( PC ) );

    #if S_FRESNEL
        float g_flFresnelExponent < Default(2.0f); Range(0.0, 10.0); UiGroup("Fresnel,10/1");>;
        float g_flFresnelReflectance < Default(0.0f); Range(-1.0f, 1.0f); UiGroup("Fresnel,10/2"); >;
        float g_flFresnelThreshold < Default(0.0f); Range(0.0f, 1.0f); UiGroup("Fresnel,10/3"); >;
        float4 g_vFresnelColor < Default4(1.0f, 1.0f, 1.0f, 1.0f); UiType( Color ); UiGroup("Fresnel,10/4"); >;
    #endif

    #if S_IRIDESCENCE
        #if S_DEBUG_IRIDESCENCE
            //Debug Settings
            float2 g_flDebugSplit < Default2(500.0f, 500.0f); Range2(0.0f, 0.0f, 1000.0f, 1000.f); UiGroup("Iridescence Debug,10/1");>;
        #endif

        float g_flIridescenceFresnelExponent < Default(2.0f); Range(0.0, 10.0); UiGroup("Iridescence,10/1");>;
        float g_flIridescenceAlbedoFactor < Default(1.0f); Range(0.0, 1.0); UiGroup("Iridescence,10/2");>;
        float g_flIridescenceFresnelReflectance < Default(0.0f); Range(-1.0f, 1.0f); UiGroup("Iridescence,10/3"); >;

        //Gradient Map
        CreateInputTexture2D( IridescenceTextureGradient,   Srgb,       8,  "",     "_color",  "Iridescence,10/4", Default3( 1.0, 1.0, 1.0 ) );
        CreateTexture2DWithoutSampler( g_tIridescenceGradient ) < Channel( RGBA, Box( IridescenceTextureGradient ), Srgb ); OutputFormat( BC7 ); SrgbRead( true ); >;

        // Mask and Metal
        CreateInputTexture2D( IridescenceTextureMask,       Linear,     8,  "",     "_mask",    "Iridescence,10/5", Default3( 1.0, 1.0, 1.0 ) );
        CreateInputTexture2D( IridescenceMetal,             Linear,     8,  "",     "_metal",   "Iridescence,10/6", Default3( 1.0, 1.0, 1.0 ) );
        CreateTexture2DWithoutSampler( g_tIridescenceMask ) < Channel( R, Box( IridescenceTextureMask ), Linear ); Channel( G, Box( IridescenceMetal ), Linear );OutputFormat( BC7 ); SrgbRead( false ); >;
        SamplerState g_sBilinearWrap < Filter( BILINEAR ); AddressU( WRAP ); AddressV( WRAP ); >;
    #endif

	PixelOutput MainPs( PixelInput i ) {
		PixelOutput o;

		Material m = GatherMaterial( i );

        // Normal Map Texture
        float3 normal = Vec3TsToWsNormalized(m.Normal * 2.0f - 1.0f, i.vNormalWs.xyz, i.vTangentUWs, i.vTangentVWs);
        float3 vPositionWs = i.vPositionWithOffsetWs.xyz + g_vHighPrecisionLightingOffsetWs.xyz;

        #if S_IRIDESCENCE

            float fresnel = CalculateFresnel(g_flIridescenceFresnelReflectance, g_flIridescenceFresnelExponent, vPositionWs, normal);

            // Gradient mapping
            float3 colorGradient = Tex2DS(g_tIridescenceGradient, g_sBilinearWrap, float2(fresnel, 0.0)).rgb;
            
            // Effect mask
            float mask = Tex2DS(g_tIridescenceMask, g_sBilinearWrap, i.vTextureCoords.xy).r;

            // Albedo
            m.Albedo = lerp(m.Albedo, lerp(float3(1.0, 1.0, 1.0), m.Albedo, g_flIridescenceAlbedoFactor) * colorGradient, mask);

            // Metal
            float iMetal = Tex2DS(g_tIridescenceMask, g_sBilinearWrap, i.vTextureCoords.xy).g;
            m.Metalness = lerp(m.Metalness, iMetal, mask);

            #if (S_DEBUG_IRIDESCENCE)
                if (i.vPositionSs.x < g_flDebugSplit.x)
                {
                    if (i.vPositionSs.y < g_flDebugSplit.y)
                    {
                        //Show Fresnel
                        o.vColor = float4(fresnel.xxx, 1.0);
                    }
                    else
                    {
                        //Show Normal
                        o.vColor = float4(normal.rgb, 1.0);
                    }
                }
                else
                {
                    if (i.vPositionSs.y < g_flDebugSplit.y)
                    {
                        //Show gradient color
                        o.vColor = float4(colorGradient, 1.0);
                    }
                    else
                    {
                        //Show Final
                        return FinalizePixelMaterial( i, m );
                    }
                }
                return o;
            #endif

        #endif

        #if S_FRESNEL
            //Fresnel
            float f = CalculateFresnel(g_flFresnelReflectance, g_flFresnelExponent, vPositionWs, normal);

            [branch]
            if (f > g_flFresnelThreshold)
            {
                o.vColor = float4(m.Albedo, 1.0);
                return o;
            }
        #endif

		return FinalizePixelMaterial( i, m );
	}
}